<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://pjbarczyk.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://pjbarczyk.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-10-30T02:13:45+00:00</updated><id>https://pjbarczyk.github.io/feed.xml</id><title type="html">Paweł Barczyk</title><entry><title type="html">code completion for external Python libraries in scripts with uv</title><link href="https://pjbarczyk.github.io/blog/2025/uv-script-code-completion/" rel="alternate" type="text/html" title="code completion for external Python libraries in scripts with uv"/><published>2025-10-20T10:00:00+00:00</published><updated>2025-10-20T10:00:00+00:00</updated><id>https://pjbarczyk.github.io/blog/2025/uv-script-code-completion</id><content type="html" xml:base="https://pjbarczyk.github.io/blog/2025/uv-script-code-completion/"><![CDATA[<p>Recently I’ve grown fond of <a href="https://github.com/Delgan/loguru">loguru</a> and <a href="https://cyclopts.readthedocs.io/en/latest/">Cyclopts</a> libraries for writing even the simplest of Python scripts, the former giving a very nice logging experience and the latter providing a clean way to define and parse command-line arguments. This of course means that running those scripts with bare <code class="language-plaintext highlighter-rouge">python script.py</code> command doesn’t work out of the box.</p> <p>Luckily, <a href="https://peps.python.org/pep-0723/">Inline script metadata</a> PEP defines a way to specify dependencies in comments at the top of the file. This is supported by <a href="https://docs.astral.sh/uv/">uv</a> tool which can run such scripts with all dependencies resolved. For example, a file <code class="language-plaintext highlighter-rouge">script.py</code> with the following code:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="kn">from</span> <span class="n">cyclopts</span> <span class="kn">import</span> <span class="n">App</span>
<span class="kn">from</span> <span class="n">loguru</span> <span class="kn">import</span> <span class="n">logger</span>

<span class="n">app</span> <span class="o">=</span> <span class="nc">App</span><span class="p">()</span>

<span class="nd">@app.default</span>
<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="n">Path</span><span class="p">):</span>
    <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Processing file: </span><span class="si">{</span><span class="n">path</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">app</span><span class="p">()</span>
</code></pre></div></div> <p>…can be enriched with such metadata like this:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv add <span class="nt">--script</span> script.py cyclopts loguru
</code></pre></div></div> <p>This will add the following comments to the top of the file:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># /// script
# requires-python = "&gt;=3.14"
# dependencies = [
#     "cyclopts",
#     "loguru",
# ]
# ///
</span><span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
<span class="bp">...</span>
</code></pre></div></div> <p>Now running <code class="language-plaintext highlighter-rouge">uv run script.py &lt;path&gt;</code> will work as expected.</p> <hr/> <p>All of these is described in detail in the <a href="https://docs.astral.sh/uv/guides/scripts/">uv documentation</a> and solves the problem of running scripts with dependencies, but alone leads to poor developer experience, as opening such a script in an IDE like VS code will not provide code completion for the external libraries specified in the metadata.</p> <p>Instead of creating a new virtual environment manually and installing the dependencies there, we can use the isolated environment that <strong>uv</strong> creates for us when running the script. To find out where that environment is located, we can run the following command:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv <span class="nb">sync</span> <span class="nt">--script</span> script.py
</code></pre></div></div> <p>On top of syncing the dependencies, this will print out the path to the interpreter used for running the script, for example:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Using script environment at: C:\Users\username\AppData\Local\uv\cache\environments-v2\script-0b647196289807de
Resolved 12 packages in 19ms
Audited 12 packages in 2ms
</code></pre></div></div> <p>We can access this path programmatically by parsing an optional JSON output with <code class="language-plaintext highlighter-rouge">jq</code> tool:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv <span class="nb">sync</span> <span class="nt">--script</span> script.py <span class="nt">--output-format</span> json | jq .sync.environment.path
</code></pre></div></div> <hr/> <p>With the path to the interpreter, we can provide it to VS Code as the Python interpreter for the workspace. Open the command palette (<code class="language-plaintext highlighter-rouge">Ctrl+Shift+P</code>), type <code class="language-plaintext highlighter-rouge">Python: Select Interpreter</code>, and choose <code class="language-plaintext highlighter-rouge">Enter interpreter path...</code>, then paste the path retrieved earlier.</p> <p>With that, you should have code completion and linting for the external libraries specified in the script metadata. You can then modify the dependencies by running <code class="language-plaintext highlighter-rouge">uv add</code> or <code class="language-plaintext highlighter-rouge">uv remove</code> commands and syncing the environment again with <code class="language-plaintext highlighter-rouge">uv sync --script script.py</code>. Happy scripting!</p>]]></content><author><name></name></author><category term="python"/><summary type="html"><![CDATA[a brief guide on how to access and use the uv-generated virtual environment in your IDE for code completion]]></summary></entry></feed>